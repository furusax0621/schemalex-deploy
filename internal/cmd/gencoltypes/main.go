package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/format"
	"log"
	"os"
	"sort"
	"strconv"
	"strings"
)

var (
	packageName = flag.String("package", "schemalex", "the name of the package")
	fileName    = flag.String("file", "columns_gen.go", "the name of the file")
)

func main() {
	flag.Parse()
	if err := _main(); err != nil {
		log.Println(err.Error())
		os.Exit(1)
	}
}

func _main() error {
	var buf bytes.Buffer

	synonyms := map[string]string{
		"Integer": "Int",
		"Numeric": "Decimal",
		"Real":    "Double",
		"Bool":    "TinyInt",
		"Boolean": "TinyInt",
	}

	types := []string{
		"Invalid",
		"Bit",
		"TinyInt",
		"SmallInt",
		"MediumInt",
		"Int",
		"Integer",
		"BigInt",
		"Real",
		"Double",
		"Float",
		"Decimal",
		"Numeric",
		"Date",
		"Time",
		"Timestamp",
		"DateTime",
		"Year",
		"Char",
		"VarChar",
		"Binary",
		"VarBinary",
		"TinyBlob",
		"Blob",
		"MediumBlob",
		"LongBlob",
		"TinyText",
		"Text",
		"MediumText",
		"LongText",
		"Enum",
		"Set",
		"Boolean",
		"Bool",
		"JSON",
		"GEOMETRY",
	}

	println := func(args ...string) {
		for _, s := range args {
			buf.WriteString(s)
			buf.WriteByte('\n')
		}
	}

	println(
		"// Code generated by internal/cmd/gencoltypes/main.go; DO NOT EDIT.",
		"",
		"package "+*packageName,
		"",
		"// ColumnType describes the possible types that a column may take",
		"type ColumnType int",
		"",
		"// List of possible ColumnType values",
		"const (",
	)
	for i, typ := range types {
		buf.WriteString("ColumnType")
		buf.WriteString(typ)
		if i == 0 {
			buf.WriteString(" ColumnType = iota")
		}
		buf.WriteString("\n")
	}
	println("")
	println("ColumnTypeMax", ")")

	println("func (c ColumnType) String() string {")
	println("switch c {")
	for _, typ := range types[1:] {
		println(
			"case ColumnType"+typ+":",
			"return "+strconv.Quote(strings.ToUpper(typ)),
		)
	}
	println(
		"default:",
		`return "(invalid)"`,
		"}",
		"}",
		"",
	)

	println(
		"// SynonymType returns synonym for a given type.",
		"// If the type does not have a synonym then this method returns the receiver itself",
		"func (c ColumnType) SynonymType() ColumnType {",
		"switch c {",
	)

	var synonymKeys []string
	for from := range synonyms {
		synonymKeys = append(synonymKeys, from)
	}
	sort.Strings(synonymKeys)

	for _, from := range synonymKeys {
		println("case ColumnType" + from + ":")
		println("return ColumnType" + synonyms[from])
	}
	println(
		"}",
		"return c",
		"}",
	)

	formatted, err := format.Source(buf.Bytes())
	if err != nil {
		fmt.Fprint(os.Stderr, buf.String())
		return err
	}

	return os.WriteFile(*fileName, formatted, 0644)
}
